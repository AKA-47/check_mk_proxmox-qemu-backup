#!/usr/bin/python

# Author: Matthias Maderer
# E-Mail: edvler@edvler-blog.de
# URL: https://github.com/edvler/check_mk_proxmox-qemu-backup
# License: See https://github.com/edvler/check_mk_proxmox-qemu-backup

from datetime import datetime

# default parameters
proxmox_qemu_backup_params = {'check_backup': 'check', 'backup_age': (93600, 108000), 'running_time': 1800}

# the inventory function (dummy)
def inventory_qemu_backup(info):
   # loop over all output lines of the agent
   for line in info:
        if line[0].startswith('QEMU-MACHINE;;;;;'):
                arr_qemu_vars = line[0].split(';;;;;')
                arr_qemu_id = arr_qemu_vars[1].split('/')
                qemu_id = arr_qemu_id[-1].replace('.conf','')
                yield arr_qemu_vars[2] + " Id: " + qemu_id + "", "proxmox_qemu_backup_params"

# the check function (dummy)
def check_qemu_backup(item, params, info):

   #ensure defaults
   if not 'check_backup' in params:
        params['check_backup'] = 'check'

   if not 'backup_age' in params:
        params['backup_age'] = (93600, 108000)

   if not 'running_time' in params:
        params['running_time'] = 1800

   #return 0 if check of backups should not be done
   if params['check_backup'] == 'ignore':
        return 0, "Backups of this QEMU guest not checked!"

   #get name of the logfile (the output of each logfile is
   #prefixed with its filename from the plugin)
   qemu_id=item.split(' ')[-1]
   logfile = '/var/log/vzdump/qemu-' + qemu_id + '.log'

   #counter
   line_count=0
   warn_count=0
   error_count=0

   archive="nothing"
   finished="nothing"
   started="nothing"
   file_created="nothing"

   offset=0

   #check all lines
   for line in info:
        #is this line of the given item (qemu_id)
        if line[0] == logfile:
                line_count += 1 #count lines of log for this id

                #Old or new dateformat in logfile?
                #old /var/log/vzdump/qemu-104.log Feb 07 12:10:54 INFO: creating archive '/vmfs/bkp-fs-stor-001/dump/vzdump-qemu-104-2018_02_07-12_10_54.vma.gz'
                #new /var/log/vzdump/qemu-105.log 2018-02-06 16:00:03 INFO: creating archive '/vmfs/bkp-urbackup01-001/dump/vzdump-qemu-105-2018_02_06-16_00_02.vma.gz'
                try:
                        testdate = datetime.strptime(line[1]  + ' ' + line[2], "%Y-%m-%d %H:%M:%S")
                        offset=0
                except ValueError:
                        offset=1

                try:
                        #extract several infos
                        if line[offset+3] + ' ' + line[offset+4] + ' ' + line[offset+5] == 'INFO: creating archive':
                                file_created = line

                        if line[offset+3] + ' ' + line[offset+4] + ' ' + line[offset+5] + ' ' + line[offset+6] == 'INFO: archive file size:':
                                archive = line

                        if line[offset+3] + ' ' + line[offset+4] + ' ' + line[offset+5] + ' ' + line[offset+6] + ' ' + line[offset+7] == 'INFO: Starting Backup of VM':
                                started = line

                        if line[offset+3] + ' ' + line[offset+4] + ' ' + line[offset+5] + ' ' + line[offset+6] + ' ' + line[offset+7] == 'INFO: Finished Backup of VM':
                                finished = line
                except IndexError:
                        pass

                #search for keywords
                for content in line:
                        if 'warn' in content.lower():
                                warn_count += 1
                        elif 'error' in content.lower() or 'fail' in content.lower():
                                error_count += 1

   #if line_count is 0, no backup file exists --> error!
   if line_count == 0:
        return 2, "No Backup exists for this QEMU guest"

   #check counter
   if error_count > 0:
        return 2, "Errors found in QEMU Backup"
   if warn_count > 0:
        return 1, "Warnings found in QEMU Backup"

   #no warnings and erros!! check if lines indicating a successfull backup exists
   if archive != "nothing" and finished != "nothing" and started != "nothing" and file_created != "nothing":
        startdate = getDateFromFileCreated(file_created[offset+6].split("/")[-1])

        old = datetime.now() - startdate
        duration_formatted = pretty_time_delta(old.total_seconds());
        infotext = 'Backup from ' + str(startdate) + ' is ' + duration_formatted + ' old'

        warn, error = params['backup_age']

        if old.total_seconds() > error:
                return 2, 'To old! ' + infotext
        if old.total_seconds() > warn:
                return 1, 'To old! ' + infotext

        return 0, infotext

   #Is backup currently running?
   if archive == "nothing" and finished == "nothing" and started != "nothing" and file_created != "nothing":
        startdate = getDateFromFileCreated(file_created[offset+6].split("/")[-1])
        old = datetime.now() - startdate
        if old.total_seconds() < params['running_time']:
                return 0, 'Backup is running since ' + str(startdate)
        else:
                return 1, 'Backup is running since ' + str(startdate)

   return 3, "Error occured in check plugin. Please post a issue on https://github.com/edvler/check_mk_proxmox-qemu-backup/issues inlcuding the output of the agent plugin /usr/lib/check_mk_agent/plugins/proxmox-qemu-backup"

# declare the check to Check_MK
check_info["proxmox-qemu-backup"] = {
    'check_function':            check_qemu_backup,
    'inventory_function':        inventory_qemu_backup,
    'service_description':       'QEMU Backup',
    'group':                     'proxmox',
}

def getDateFromFileCreated(vma_name):
        p = re.compile("(20[0-9][0-9]_[0-9][0-9]_[0-9][0-9]-[0-9][0-9]_[0-9][0-9]_[0-9][0-9])")
        m = p.search(vma_name)
        startdate = datetime.strptime(m.group(1),"%Y_%m_%d-%H_%M_%S")
        return startdate


#thanks to https://gist.github.com/thatalextaylor/7408395
def pretty_time_delta(seconds):
    sign_string = '-' if seconds < 0 else ''
    seconds = abs(int(seconds))
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    if days > 0:
        return '%s%dd %dh %dm %ds' % (sign_string, days, hours, minutes, seconds)
    elif hours > 0:
        return '%s%dh %dm %ds' % (sign_string, hours, minutes, seconds)
    elif minutes > 0:
        return '%s%dm %ds' % (sign_string, minutes, seconds)
    else:
        return '%s%ds' % (sign_string, seconds)
